generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email            String  @unique
  username         String  @unique
  passwordHash     String
  refreshTokenHash String?

  reviews  Review[]
  comments Comment[]
  votes    Vote[]

  @@map("users")
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  stars     Float
  rating    Int      @default(0)
  movieId   Int // TMDB ID
  deleted   Boolean  @default(false) // Show same things but not specify the user

  reviewer   User @relation(fields: [reviewerId], references: [id])
  reviewerId Int

  comments Comment[]
  votes    Vote[]

  @@map("reviews")
}

model Comment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  rating      Int      @default(0)
  deleted     Boolean  @default(false) // Show same things but not specify the user and what he commented
  commenter   User     @relation(fields: [commenterId], references: [id])
  commenterId Int

  review   Review? @relation(fields: [reviewId], references: [id])
  reviewId Int?

  parent   Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  parentId Int?

  children Comment[] @relation("CommentToComment")

  votes Vote[]

  @@map("comments")
}

model Vote {
  id     Int  @id @default(autoincrement())
  value  Int // 1 or -1 for up/down
  user   User @relation(fields: [userId], references: [id])
  userId Int

  review   Review? @relation(fields: [reviewId], references: [id])
  reviewId Int?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?

  @@unique([userId, reviewId, commentId])
}
